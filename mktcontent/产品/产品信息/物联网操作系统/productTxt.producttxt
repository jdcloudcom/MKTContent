[
	{
		"txt":"{\"instruction\":[],\"productName\":\"IoT OS\",\"label\":[{\"TitleName\":\"Obtain JD Service Component\",\"TitleUrl\":\"https://github.com/RT-Thread-packages/joylink\",\"classTag\":\"1\"},{\"TitleName\":\"Obtain Open Source Code\",\"TitleUrl\":\"https://github.com/RT-Thread/rt-thread\",\"classTag\":\"1\"}],\"desc\":\"It is a real-time operating system oriented at IoT and can be widely applied in IoT fields such as Smart Home, Smart City and Intelligent Industry. The built-in JD Cloud & AI IoT services and protocols can be run on clips with limited resources and can be used to quickly access the intelligent products and then use the JD Cloud & AI IoT services.\"}",
		"id":1924
	},
	{
		"txt":"[{\"showShade\":false,\"proGood\":\"Rich Components\",\"proName\":\"With embedded RT-Thread software package, the IoT development provides rich software components that can be used to easily expand the system functions and shorten the development cycle.\"},{\"showShade\":false,\"proGood\":\"Quick Access Platform\",\"proName\":\"The IoT OS has built in JD's IoT services. The products can use this system to quickly access the platform, saving the connection time.\"},{\"showShade\":false,\"imageUrl\":\"\",\"proGood\":\"Simple and Easy to Use\",\"proName\":\"Zero-threshold C Language development; unified UNIX code style; powerful one-stop development platform RT-Thread Studio and graphical IDE.\"},{\"showShade\":false,\"imageUrl\":\"\",\"proGood\":\"Cross-chip Platform\",\"proName\":\"Application programs programed with the RT-Thread API can be frequently reused no matter what microcontroller you have selected.\"},{\"showShade\":false,\"imageUrl\":\"\",\"proGood\":\"Abundant Sensor Support\",\"proName\":\"The RT-Thread Sensor LOGO Plan gives full cooperation to numerous sensor manufacturers and offers a unified and standard sensor drive package in RT-Thread operating system to enhance the development efficiency.\"},{\"showShade\":false,\"imageUrl\":\"\",\"proGood\":\"High Scalability and Reusability\",\"proName\":\"The function components using modular design and loose coupling with OS kernel can easily adapt to different hardware platforms and business scenarios with graphical IDE cropping or expansion. Users can use such adapted functions forever in a one-go development.\"}]",
		"id":1925
	},
	{
		"txt":"[{\"funcName\":\"Hard Real-time Kernel\",\"funcContent\":[{\"funcTitle\":\"The preemptive real-time multitasking RTOS is based on round-robin.\",\"funcP\":\"RT-Thread as an extremely simply hard real-time kernel is a kind of scalable, preemptive real-time multitasking RTOS. It is featured with small size, quick start, high real time and few resources occupied.\"}]},{\"funcName\":\"Platform Access Capability\",\"funcContent\":[{\"funcTitle\":\"The IoT OS has built in JD's IoT module so that the platform can be quickly and safely accessed.\",\"funcP\":\"The IoT OS has built in JD's IoT module, including network adapter, device control, OTA upgrade, security verification and policy and so on, which largely enhance the access efficiency of products and increase the security.\"}]},{\"funcName\":\"DFS Virtual File System\",\"funcContent\":[{\"funcTitle\":\"DFS (Device File System) is a software component used by RT-Thread to manage different types of storage mediums or file systems.\",\"funcP\":\"It provides application programs with unified POSIX files and directory APIs such as read, write, poll/select, etc. It supports multiple types of file systems such as FatFS, RomFS and DevFS, and provides management for trivial files, device files and network file descriptors. It also supports multiple types of storage devices such as SD Card, SPI Flash, Nand Flash, etc.\"}]},{\"funcName\":\"AT Framework\",\"funcContent\":[{\"funcTitle\":\"There are a variety of network AT modules. To facilitate development, RT-Thread implements abstractly an AT framework in which AT modules can be operated through the BSD socket standard API.\",\"funcP\":\"The AT component is implemented based on AT Server and AT Client of RT-Thread system. The component will accomplish the whole data interaction process of AT command, which comprises of AT command sending, command format and parameter judgment, command response, response data receipt, response data resolution, and URC data processing.\"}]},{\"funcName\":\"FinSH Console\",\"funcContent\":[{\"funcTitle\":\"FinSH is a component of RT-Thread's command line, providing a set of operation APIs that can be called by users in the command line, which is used to debug or view system information. It can use the serial port/Ethernet/USB to communicate with the PCs.\",\"funcP\":\"FinSH is a shell terminal under embedded platform. The shell just likes a communication bridge between the developer and the computer, with which, the developer can easily obtain the system running conditions and control it by commands.\"}]},{\"funcName\":\"SMP/AMP Support\",\"funcContent\":[{\"funcTitle\":\"Support in symmetric multicore and heterogeneous multicore hardware platforms.\",\"funcP\":\"The RT-Thread operating systems can be synchronously on multiple cores for unified scheduling management.\"}]},{\"funcName\":\"SAL Network Abstraction Layer\",\"funcContent\":[{\"funcTitle\":\"SAL (Socket Abstraction Layer) is used to implement unified operations of different network types.\",\"funcP\":\"To adapt more types of network protocol stacks and prevent the system from relying on a single network protocol stack, the RT-Thread system offers a set of SAL (Socket Abstraction Layer) components,\\n which abstract different network protocol stacks or network implementation APIs and provide the upper layer with a group of standard BSD Socket APIs, in which case the developer only needs to focus on and use network APIs provided by the network application layer without concerning the specific type of the network protocol stack in underlayer and its implementation, largely increasing the system compatibility and facilitating the developer to accomplish adaptation of protocol stacks and development of the network.\"}]},{\"funcName\":\"Microkernel Support in Cortex-A and Cortex-M Platforms\",\"funcContent\":[{\"funcTitle\":\"RT-Thread's microkernel architecture has implemented the application and kernel separation mechanism on Cortex-A and Cortex-M platforms, which is safer and more reliable, suitable for application scenarios of high security standards.\",\"funcP\":\"This safer OS architecture supports permission separation, application isolation, dynamic loading and other advanced functions.\"}]}]",
		"id":1926
	},
	{
		"txt":"[{\"name\":\"Quick Start\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/2-studio-user-begin\",\"classTag\":\"\"},{\"name\":\"Joylink Access Guide\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/overview\",\"classTag\":\"\"},{\"name\":\"Thread Management\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/1-thread\",\"classTag\":\"\"},{\"name\":\"Clock Management\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/2-timer\",\"classTag\":\"\"},{\"name\":\"Thread Synchronization\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/3-ipc1\",\"classTag\":\"\"},{\"name\":\"Thread-to-thread Communication\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/4-ipc2\",\"classTag\":\"\"},{\"name\":\"Memory Management\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/5-memory\",\"classTag\":\"\"},{\"name\":\"Interruption Management\",\"link\":\"https://docs.jdcloud.com/en/rt-thread-for-jd/6-interrupt\",\"classTag\":\"\"}]",
		"id":1974
	}
]